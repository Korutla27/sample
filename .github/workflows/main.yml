name: CI-CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Code Clone
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Setup Python (or change to Java/Node/etc.)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Step 3: Install Dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Code Review (Linting / Static Analysis)
      - name: Run Linter
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      # Step 5: Compile (Python usually interpreted, if Java/Go/TS replace accordingly)
      - name: Compile Code
        run: |
          echo "Compiling code... (Python doesnâ€™t need compilation, adjust if Java/Go/C++)"

      # Step 6: Run Unit Tests
      - name: Run Unit Tests
        run: |
          pytest --maxfail=1 --disable-warnings -q

      # Step 7: Build Project (Artifact)
      - name: Build Package
        run: |
          python setup.py sdist bdist_wheel || echo "No setup.py found, skipping"

      # Step 8: Docker Build & Push
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/myapp:latest

      # Step 9: Deploy (Example using SSH to server)
      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/myapp:latest
            docker stop myapp || true
            docker rm myapp || true
            docker run -d -p 8000:8000 --name myapp ${{ secrets.DOCKER_USERNAME }}/myapp:latest
